<mxfile host="app.diagrams.net" modified="2022-05-27T12:01:36.856Z" agent="5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.0.0 Safari/537.36" etag="vXujKGufBDUe0aaDi2Rt" version="18.1.1" type="github">
  <diagram id="ixZHhRBdgr8huFLMsZwX" name="Page-1">
    <mxGraphModel dx="1056" dy="1854" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="827" pageHeight="1169" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="xrDSkSMQvehZMadIAZ1p-1" value="&lt;div style=&quot;font-size: 16px;&quot;&gt;&lt;ul style=&quot;font-size: 16px;&quot;&gt;&lt;li style=&quot;font-size: 16px;&quot;&gt;字段有唯一性限制的，比如商品编码；&lt;/li&gt;&lt;li style=&quot;font-size: 16px;&quot;&gt;经常用于 WHERE 查询条件的字段；&lt;/li&gt;&lt;li style=&quot;font-size: 16px;&quot;&gt;经常用于 GROUP BY 和 ORDER BY 的字段；&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;fontSize=16;fillColor=#dae8fc;strokeColor=#6c8ebf;" vertex="1" parent="1">
          <mxGeometry x="390" y="60" width="440" height="110" as="geometry" />
        </mxCell>
        <mxCell id="xrDSkSMQvehZMadIAZ1p-2" value="什么时候适用索引？" style="rounded=0;whiteSpace=wrap;html=1;fontSize=16;fillColor=#dae8fc;strokeColor=#6c8ebf;" vertex="1" parent="1">
          <mxGeometry x="120" y="60" width="270" height="110" as="geometry" />
        </mxCell>
        <mxCell id="xrDSkSMQvehZMadIAZ1p-3" value="什么时候不需要创建索引？" style="rounded=0;whiteSpace=wrap;html=1;fontSize=16;fillColor=#dae8fc;strokeColor=#6c8ebf;" vertex="1" parent="1">
          <mxGeometry x="120" y="170" width="270" height="150" as="geometry" />
        </mxCell>
        <mxCell id="xrDSkSMQvehZMadIAZ1p-4" value="&lt;div style=&quot;font-size: 16px;&quot;&gt;&lt;ul&gt;&lt;li&gt;WHERE 条件，GROUP BY，ORDER BY 里用不到的字段；&lt;/li&gt;&lt;li&gt;字段中存在大量重复数据，不需要创建索引；&lt;/li&gt;&lt;li&gt;表数据太少的时候，不需要创建索引；&lt;/li&gt;&lt;li&gt;经常更新的字段不用创建索引；&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;fontSize=16;fillColor=#dae8fc;strokeColor=#6c8ebf;" vertex="1" parent="1">
          <mxGeometry x="390" y="170" width="440" height="150" as="geometry" />
        </mxCell>
        <mxCell id="xrDSkSMQvehZMadIAZ1p-5" value="什么时候索引会失效？" style="rounded=0;whiteSpace=wrap;html=1;fontSize=16;fillColor=#dae8fc;strokeColor=#6c8ebf;" vertex="1" parent="1">
          <mxGeometry x="120" y="320" width="270" height="280" as="geometry" />
        </mxCell>
        <mxCell id="xrDSkSMQvehZMadIAZ1p-6" value="&lt;div style=&quot;&quot;&gt;&lt;ul style=&quot;&quot;&gt;&lt;li style=&quot;&quot;&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;当我们使用左或者左右模糊匹配的时候，也就是 `like %xx` 或者 `like %xx%`这两种方式都会造成索引失效；&lt;/span&gt;&lt;br&gt;&lt;/li&gt;&lt;li style=&quot;&quot;&gt;当我们在查询条件中对索引列做了计算、函数、类型转换操作，会导致索引失效&lt;/li&gt;&lt;li style=&quot;&quot;&gt;联合索引要能正确使用需要遵循最左匹配原则，也就是按照最左优先的方式进行索引的匹配，否则就会导致索引失效。&lt;/li&gt;&lt;li style=&quot;&quot;&gt;在 WHERE 子句中，如果在 OR 前的条件列是索引列，而在 OR 后的条件列不是索引列，那么索引会失效。&lt;/li&gt;&lt;li style=&quot;&quot;&gt;为了更好的利用索引，索引列要设置为 NOT NULL 约束。&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;fontSize=16;fillColor=#dae8fc;strokeColor=#6c8ebf;" vertex="1" parent="1">
          <mxGeometry x="390" y="320" width="440" height="280" as="geometry" />
        </mxCell>
        <mxCell id="xrDSkSMQvehZMadIAZ1p-8" value="有什么优化索引的方法？" style="rounded=0;whiteSpace=wrap;html=1;fontSize=16;fillColor=#dae8fc;strokeColor=#6c8ebf;" vertex="1" parent="1">
          <mxGeometry x="120" y="600" width="270" height="150" as="geometry" />
        </mxCell>
        <mxCell id="xrDSkSMQvehZMadIAZ1p-9" value="&lt;div style=&quot;&quot;&gt;&lt;ul style=&quot;&quot;&gt;&lt;li style=&quot;box-sizing: border-box; margin: 0px; position: relative;&quot; class=&quot;md-list-item md-focus-container&quot;&gt;&lt;p style=&quot;box-sizing: border-box; line-height: inherit; orphans: 4; margin: 0px 0px 0.5rem; overflow-wrap: break-word; position: relative;&quot; class=&quot;md-end-block md-p md-focus&quot;&gt;&lt;span style=&quot;box-sizing: border-box;&quot; class=&quot;md-plain md-expand&quot;&gt;前缀索引优化；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; margin: 0px; position: relative;&quot; class=&quot;md-list-item&quot;&gt;&lt;p style=&quot;box-sizing: border-box; line-height: inherit; orphans: 4; margin: 0px 0px 0.5rem; overflow-wrap: break-word; position: relative;&quot; class=&quot;md-end-block md-p&quot;&gt;&lt;span style=&quot;box-sizing: border-box;&quot; class=&quot;md-plain&quot;&gt;覆盖索引优化；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; margin: 0px; position: relative;&quot; class=&quot;md-list-item&quot;&gt;&lt;p style=&quot;box-sizing: border-box; line-height: inherit; orphans: 4; margin: 0px 0px 0.5rem; overflow-wrap: break-word; position: relative;&quot; class=&quot;md-end-block md-p&quot;&gt;&lt;span style=&quot;box-sizing: border-box;&quot; class=&quot;md-plain&quot;&gt;主键索引最好是自增的；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li style=&quot;box-sizing: border-box; margin: 0px; position: relative;&quot; class=&quot;md-list-item md-focus-container&quot;&gt;&lt;p style=&quot;box-sizing: border-box; line-height: inherit; orphans: 4; margin: 0px 0px 0.5rem; overflow-wrap: break-word; position: relative;&quot; class=&quot;md-end-block md-p md-focus&quot;&gt;&lt;span style=&quot;box-sizing: border-box;&quot; class=&quot;md-plain md-expand&quot;&gt;防止索引失效；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;fontSize=16;fillColor=#dae8fc;strokeColor=#6c8ebf;" vertex="1" parent="1">
          <mxGeometry x="390" y="600" width="440" height="150" as="geometry" />
        </mxCell>
        <mxCell id="xrDSkSMQvehZMadIAZ1p-10" value="为什么 MySQL InnoDB&amp;nbsp; 选择 B+tree 作为索引的数据结构？" style="rounded=0;whiteSpace=wrap;html=1;fontSize=16;fillColor=#dae8fc;strokeColor=#6c8ebf;" vertex="1" parent="1">
          <mxGeometry x="120" y="-310" width="270" height="370" as="geometry" />
        </mxCell>
        <mxCell id="xrDSkSMQvehZMadIAZ1p-11" value="&lt;div style=&quot;&quot;&gt;&lt;div style=&quot;&quot;&gt;B+Tree vs B Tree：&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;ul&gt;&lt;li&gt;存储相同数据量级别的情况下，B+Tree 树高比&amp;nbsp;&amp;nbsp;B Tree 低，磁盘 I/O 次数更少。&lt;/li&gt;&lt;li&gt;&amp;nbsp;B+Tree 叶子节点用双向链表串起来，适合范围查询，B Tree 无法做到这点&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;B+Tree vs 二叉树：&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;随着数据量的增加，二叉树的树高会越来约高，磁盘 I/O 次数也会更多，&amp;nbsp;B+Tree 在千万级别的数据量下，高度依然维持在 3~4 层左右，也就是说一次数据查询操作只需要做 3~4 次的磁盘 I/O 操作就能查询到目标数据。&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;B+Tree vs Hash：&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;虽然 Hash 的等值查询效率很高，但是无法做范围查询&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;" style="rounded=0;whiteSpace=wrap;html=1;align=left;fontSize=16;fillColor=#dae8fc;strokeColor=#6c8ebf;" vertex="1" parent="1">
          <mxGeometry x="390" y="-310" width="440" height="370" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
